Note: Lists are similar to arrays in other programming languages. When people refer to arrays in Python, 
they often mean lists, even though there is a numeric array type in Python.


List
We create a list by placing elements inside square brackets [], separated by commas.
 # a list of three elements
ages = [19, 26, 29]
print(ages)
# Output: [19, 26, 29]

List Characteristics
Lists are:

    Ordered - They maintain the order of elements.
    Mutable - Items can be changed after creation.
    Allow duplicates - They can contain duplicate values.

languages = ['orange','bnana','apple']
print(languages[0])
print(languages[1])

fruits = ['orange','bnana','apple']
print("fruits: ", fruits)

fruits.append('cherry')
print("updated list", fruits)

fruits[2] = "grapes"
print("updated list2", fruits)

fruits.remove("bnana")
print(fruits)

# List Length
print(len(fruits))

#Iterating Through a List

for i in fruits:
    print(i)

Python List Methods
append()	Adds an item to the end of the list
extend()	Adds items of lists and other iterables to the end of the list
insert()	Inserts an item at the specified index
remove()	Removes item present at the given index
pop()	Returns and removes item present at the given index
clear()	Removes all items from the list
index()	Returns the index of the first matched item
count()	Returns the count of the specified item in the list
sort()	Sorts the list in ascending/descending order
reverse()	Reverses the item of the list
copy()	Returns the shallow copy of the list


Python Tuple::::::::::::::::::
We create a tuple by placing items inside parentheses (). For example,

numbers = (1, 2, -5)
print(numbers)
# Output: (1, 2, -5)

Tuple Characteristics
Tuples are:

Ordered - They maintain the order of elements.
Immutable - They cannot be changed after creation.
Allow duplicates - They can contain duplicate values.

languages = ('Python', 'Swift', 'C++')
# access the first item
print(languages[0])   # Python
# access the third item
print(languages[2])   # C++


Tuple Cannot be Modified
Python tuples are immutable (unchangeable). We cannot add, change, or delete items of a tuple.

If we try to modify a tuple, we will get an error. For example,

cars = ('BMW', 'Tesla', 'Ford', 'Toyota')

# trying to modify a tuple
cars[0] = 'Nissan'    # error
       
print(cars)

cars = ('BMW', 'Tesla', 'Ford', 'BMW')
print(len(cars))

for i in cars:
    print(i)




#########Python Sets

A set is a collection of **unique data**, meaning that elements within a set cannot be duplicated.
In Python, we create sets by placing all the elements inside curly braces {}, separated by commas.
A set can have any number of items and they may be of different types (integer, float, tuple, string, etc.). But a set cannot have mutable elements like lists, sets or dictionaries as its elements.

# create a set of integer type
student_id = {112, 114, 116, 118, 115}
print('Student ID:', student_id)

# create a set of string type
vowel_letters = {'a', 'e', 'i', 'o', 'u'}
print('Vowel Letters:', vowel_letters)

# create a set of mixed data types
mixed_set = {'Hello', 101, -2, 'Bye'}
print('Set of mixed data types:', mixed_set)



Create an Empty Set in Python


Creating an empty set is a bit tricky. Empty curly braces {} will make an empty dictionary in Python.

To make a set without any elements, we use the set() function without any argument. For example,

# create an empty set
empty_set = set()

# create an empty dictionary
empty_dictionary = { }

# check data type of empty_set
print('Data type of empty_set:', type(empty_set))

# check data type of dictionary_set
print('Data type of empty_dictionary:', type(empty_dictionary))
Run Code
Output

Data type of empty_set: <class 'set'>
Data type of empty_dictionary: <class 'dict'>
Here,

empty_set - an empty set created using set()
empty_dictionary - an empty dictionary created using {}

numbers = {2, 4, 6, 6, 2, 8}
print(numbers)   # {8, 2, 4, 6}

numbers.add(32)
print(numbers) 

Update Python Set
The update() method is used to update the set with items other collection types (lists, tuples, sets, etc). For example,

companies = {'Lacoste', 'Ralph Lauren'}
tech_companies = ['apple', 'google', 'apple']

# using update() method
companies.update(tech_companies)

print(companies)

companies.discard("apple")
print(companies)

for i in companies:
    print (i)
# Output: {'google', 'apple', 'Lacoste', 'Ralph Lauren'}

def swapList(newList):
    size = len(newList)
     
    # Swapping 
    temp = newList[0]
    newList[0] = newList[size - 1]
    newList[size - 1] = temp
     
    return newList
# Driver code
newList = [12, 35, 9, 56, 24]

 
print(swapList(newList))

Built-in Functions with Set
Here are some of the popular built-in functions that allow us to perform different operations on a set.

Function	Description
all()	Returns True if all elements of the set are true (or if the set is empty).
any()	Returns True if any element of the set is true. If the set is empty, returns False.
enumerate()	Returns an enumerate object. It contains the index and value for all the items of the set as a pair.
len()	Returns the length (the number of items) in the set.
max()	Returns the largest item in the set.
min()	Returns the smallest item in the set.
sorted()	Returns a new sorted list from elements in the set(does not sort the set itself).
sum()	Returns the sum of all elements in the set.

Method	Description
add()	Adds an element to the set
clear()	Removes all elements from the set
copy()	Returns a copy of the set
difference()	Returns the difference of two or more sets as a new set
difference_update()	Removes all elements of another set from this set
discard()	Removes an element from the set if it is a member. (Do nothing if the element is not in set)
intersection()	Returns the intersection of two sets as a new set
intersection_update()	Updates the set with the intersection of itself and another
isdisjoint()	Returns True if two sets have a null intersection
issubset()	Returns True if another set contains this set
issuperset()	Returns True if this set contains another set
pop()	Removes and returns an arbitrary set element. Raises KeyError if the set is empty
remove()	Removes an element from the set. If the element is not a member, raises a KeyError
symmetric_difference()	Returns the symmetric difference of two sets as a new set
symmetric_difference_update()	Updates a set with the symmetric difference of itself and another
union()	Returns the union of sets in a new set
update()	Updates the set with the union of itself and others

#Python Dictionary
#in a dictionary is a key-value pair (consisting of a key and a value).

Create a Dictionary
We create a dictionary by placing key: value pairs inside curly brackets {}, separated by commas. For example,

# creating a dictionary
country_capitals = {
  "Germany": "Berlin", 
  "Canada": "Ottawa", 
  "England": "London"
}

# printing the dictionary
print(country_capitals)

Output

{'Germany': 'Berlin', 'Canada': 'Ottawa', 'England': 'London'}

Notes:

Dictionary keys must be immutable, such as tuples, strings, integers, etc. We cannot use mutable (changeable) objects such as lists as keys.
We can also create a dictionary using a Python built-in function dict(). To learn more, visit Python dict().

country_capitals = {
  "Germany": "Berlin", 
  "Canada": "Ottawa", 
  "England": "London"
}

# access the value of keys
print(country_capitals["Germany"])    # Output: Berlin
print(country_capitals["England"])    # Output: London

country_capitals = {
  "Germany": "Berlin", 
  "Canada": "Ottawa", 
}

# add an item with "Italy" as key and "Rome" as its value
country_capitals["Italy"] = "Rome"

print(country_capitals)
Output

{'Germany': 'Berlin', 'Canada': 'Ottawa', 'Italy': 'Rome'}

Python Dictionary Methods
Here are some of the commonly used dictionary methods.

Function	Description
pop()	Removes the item with the specified key.
update()	Adds or changes dictionary items.
clear()	Remove all the items from the dictionary.
keys()	Returns all the dictionary's keys.
values()	Returns all the dictionary's values.
get()	Returns the value of the specified key.
popitem()	Returns the last inserted key and value as a tuple.
copy()	Returns a copy of the dictionary.


Dictionary Membership Test
We can check whether a key exists in a dictionary by using the in and not in operators.

file_types = {
    ".txt": "Text File",
    ".pdf": "PDF Document",
    ".jpg": "JPEG Image",
}

# use of in and not in operators
print(".pdf" in file_types)       # Output: True
print(".mp3" in file_types)       # Output: False
print(".mp3" not in file_types)   # Output: True
Run Code
Note: The in operator checks whether a key exists; it doesn't check whether a value exists or not.

import emoji # type: ignore

print(emoji.emojize("I love reading books:books:"))
print(emoji.emojize("Some people have a very sensitive heart:red_heart:, please be kind with them.:hibiscus:"))









###Functions

A function is a block of code that performs a specific task.

Suppose we need to create a program to make a circle and color it. We can create two functions to solve this problem:

function to create a circle
function to color the shape
Dividing a complex problem into smaller chunks makes our program easy to understand and reuse.

def greet(name):
    print("Hello!", name)

# pass argument
greet("John")
greet("David")

def add_number(num1, num2):
    sum = num1 + num2
    print("sum: ", sum)
add_number(3,4)

def square_num(num):
    square = (num*num)
    print("square", square)
square_num(3)

The pass Statement
def future_function():
    pass

# this will execute without any action or error
future_function()  

import math

square_root = math.sqrt(4)
print(square_root)
power = pow(2,3)
print(power)


Python Modules
As our program grows bigger, it may contain many lines of code. Instead of putting everything in a single file, we can use modules to separate codes in separate files as per their functionality. This makes our code organized and easier to maintain.
# import standard math module 
import math
# use math.pi to get value of pi
print("The value of pi is", math.pi)



Python import with Renaming
# import module by renaming it
import math as m

print(m.pi)

# Output: 3.141592653589793

Python from...import statement
# import only pi from math module
from math import pi

print(pi)

# Output: 3.141592653589793

Import all names
# import all names from the standard module math
from math import *

print("The value of pi is", pi)

Function Argument with Default Values  
def add_numbers( a =7, b=2):
    sum = a + b
    print(sum)
add_numbers(4,3)
add_numbers(2)
add_numbers()
7
4
9

Python Keyword Argument
def display_info(first_name,last_name):
    print(first_name)
    print(last_name)
display_info("Nikki","reddy")


Python Function With Arbitrary Arguments
sometimes, we do not know in advance the number of arguments that will be passed into a function. To handle this kind of situation, we can use arbitrary arguments in Python.

We use an asterisk (*) before the parameter name to denote this kind of argument. For example,

def find_sum(*numbers):
    result = 0

    for i in numbers:
        result += i
    print(result)
find_sum(2,3,4)




Python Variable Scope
Based on the scope, we can classify Python variables into three types:

Local Variables
Global Variables
Nonlocal Variables

message = 'Hello'
def greet():

    # local variable
    
    print('Local', message)

greet()

# try to access message variable 
# outside greet() function
print('global', message)



Python Nonlocal Variables
In Python, nonlocal variables are used in nested functions whose local scope is not defined. This means that the variable can be neither in the local nor the global scope.

We use the nonlocal keyword to create nonlocal variables. For example,

outside function 
def outer():
    message = 'local'

    # nested function  
    def inner():

        # declare nonlocal variable
        nonlocal message

        message = 'nonlocal'
        print("inner:", message)

    inner()
    print("outer:", message)

outer()


Python Global Keyword
In Python, the global keyword allows us to modify the variable outside of the current scope.

It is used to create a global variable and make changes to the variable in a local context.

c = 1 # global variable

def add():
    print(c)

add()

# Output: 1

####

c = 1

def add():
    c = c + 2
    print(c)

add() 

Output

UnboundLocalError: local variable 'c' referenced before assignment
This is because we can only access the global variable but cannot modify it from inside the function.

The solution for this is to use the global keyword.

global variable
c = 1
def num():   
    use of global keyword
    global c

    increment c by 2
    c = c + 2
    print(c)
num()

def outer_function():
    num = 20

    def inner_function():
        global num
        num = 25
    print(num)
    inner_function()
    print(num)

outer_function()
print(num)

def factorial(x):
    if x == 1:
        return 1
    else:
         return (x * factorial(x-1))
n = 3
print(factorial(n))


import csv

with open('table.csv', 'r') as file:
    reader = csv.reader(file)

    for row in reader:
        print(row)

Write to CSV Files with Python
with open('table.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["SN", "Movie", "Protagonist"])
    writer.writerow([1, "Lord of the Rings", "Frodo Baggins"])
    writer.writerow([2, "Harry Potter", "Harry Potter"])

Introduction to Pandas
Pandas is a Python library used for data manipulation and analysis. Pandas provides a convenient way to analyze and clean data.
The Pandas library introduces two new data structures to Python - Series and DataFrame, both of which are built on top of NumPy.

https://www.programiz.com/python-programming/pandas/introduction#install-pandas

Read CSV Files
import pandas as pd
pd.read_csv("person.csv")



Write to a CSV Files
import pandas as pd

# creating a data frame
df = pd.DataFrame([['Jack', 24], ['Rose', 22]], columns = ['Name', 'Age'])

# writing data frame to a CSV file
df.to_csv('person.csv')


import csv
data_list = [["SN", "Name", "Contribution"],
             [1, "Linus Torvalds", "Linux Kernel"],
             [2, "Tim Berners-Lee", "World Wide Web"],
             [3, "Guido van Rossum", "Python Programming"]]
with open('innovators.csv', 'w', newline='') as file:
    writer = csv.writer(file, delimiter=',')
    writer.writerows(data_list)


import csv
row_list = [
    ["SN", "Name", "Quotes"],
    [1, "Buddha", "What we think we become"],
    [2, "Mark Twain", "Never regret anything that made you smile"],
    [3, "Oscar Wilde", "Be yourself everyone else is already taken"]
]
with open('quotes.csv', 'w', newline='') as file:
    writer = csv.writer(file, quoting=csv.QUOTE_NONNUMERIC,
                        delimiter=';', quotechar='*')
    writer.writerows(row_list)
   ## //row_list[2][0]



####Python Error and Exception
Errors represent conditions such as compilation error, syntax error, error in the logical part of the code, library incompatibility, infinite recursion, etc.

Errors are usually beyond the control of the programmer and we should not try to handle errors.

Exceptions can be caught and handled by the program.

Now we know about exceptions, we will learn about handling exceptions in the next tutorial.

Python Exception Handling
In the last tutorial, we learned about Python exceptions. We know that exceptions abnormally terminate the execution of a program.

Since exceptions abnormally terminate the execution of a program, it is important to handle exceptions. In Python, we use the try...except block to handle exceptions.

try:
    
    even_numbers = [2,4,6,8]
    print(even_numbers[5])

except ZeroDivisionError:
    print("Denominator cannot be 0.")
    
except IndexError:
    print("Index Out of Bound.")

Output: Index Out of Bound


Python try with else clause
In some situations, we might want to run a certain block of code if the code block inside try runs without any errors.

For these cases, you can use the optional else keyword with the try statement.

Let's look at an example:

# program to print the reciprocal of even numbers

try:
    num = int(input("Enter a number: "))
    assert num % 2 == 0
except:
    print("Not an even number!")
else:
    reciprocal = 1/num
    print(reciprocal)


Python try...finally
In Python, the finally block is always executed no matter whether there is an exception or not.

The finally block is optional. And, for each try block, there can be only one finally block.

Let's see an example,

try:
    numerator = 10
    denominator = 0

    result = numerator/denominator

    print(result)
except:
    print("Error: Denominator cannot be 0.")
    
finally:
    print("This is finally block.")

Example: Python User-Defined Exception
# define Python user-defined exceptions
class InvalidAgeException(Exception):
    "Raised when the input value is less than 18"
    pass

# you need to guess this number
number = 18

try:
    input_num = int(input("Enter a number: "))
    if input_num < number:
        raise InvalidAgeException
    else:
        print("Eligible to Vote")
        
except InvalidAgeException:
    print("Exception occurred: Invalid Age")




Python Closures
Python closure is a nested function that allows us to access variables of the outer function even after the outer function is closed.

Before we learn about closure, let's first revise the concept of nested functions in Python.

Nested function in Python
In Python, we can create a function inside another function. This is known as a nested function. For example,

def greet(name):
    # inner function
    def display_name():
        print("Hi", name)
    
    # call inner function
    display_name()

# call outer function
greet("John")  

# Output: Hi John


==================================================
def add_number(number1, number2 ):

    products = number1 * number2

    if products <= 1000: 
        return products  
    else:
        return number1 + number2

        
result = add_number(20,30)
print(result)

def previous_num():
    for i in range(10):
        print("The current number is: ",i)


secret_number = 20
while True:
    try:
     number = int(input("Enter your number: "))
    expect:
        print("sorry")
        continue
if number != secret_number
    

def simulate(entries):
    """
    :param entries: (list(int)) The numerical record files
    :returns: (list(int)) The record files after running the malware
    """
    for i in range(len(entries)):
        if entries[i] > 0  and entries[i] %2 == 0:
            entries[i] = 0
        return entries

records = [1, 2, 0, 5, 0, 2, 4, 3, 3, 3]
records[1] = 0
records[5] = 0
records[6] = 0
records[9] = 0
print(simulate(records))


try:
    f = open("demofile.txt")
    try:
        f.write("not x found")
    except:
        print("finally somewhere")
    finally:
        f.close()
except:
    print("dferfv fdds")

try :
    a= 10
    b = 0
    c = a / b
    print("The answer of a divide by b:", c)
except:
    print("Can't divide with zero. Provide different number")

try :
    a= int(input("Enter a value"))
    b = int(input("Enter a value"))
    c = a / b
    print("The answer of a divide by b:", c)
except ValueError:
    print("Can't divide with name. Provide different number")
except ZeroDivisionError:
    print("Can't divide with zero. Provide different number")
import  pyqrcode

url = pyqrcode.create("https://www.instagram.com/python.boy/")
url.svg("pythonboy_qr.svg", scale = 4)
print(url.terminal(quiet_zone=1)) 
